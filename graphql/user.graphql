type User {
    id: ID!
    name: String!
    age: Int!
    gender: Gender!
    email: String!
    masked_email: String! @field(resolver: "App\\GraphQL\\Queries\\UserResolver@maskedEmail")
    is_adult: Boolean! @method(name: isAdult)
    created_at: DateTime!
    updated_at: DateTime!
    birth_year: String! @field(resolver: "App\\GraphQL\\Queries\\UserResolver@birthYear")
    blood_type: BloodType!
    lukey_items_today: [LukeyItem!]! @field(resolver: "App\\GraphQL\\Queries\\UserResolver@getLukeyItemsRandomly")

    posts: [Post!] @hasMany
    posts_in_decade: [Post!] @hasMany(relation: postsInDecade, type: paginator, defaultCount: 2, maxCount:5)
    posts_in(year: Int!): [Post!] @method(name: postsIn)

    notes: [Note!] @hasMany
}

enum Gender {
    MALE @enum(value: 0)
    FEMALE @enum(value: 1)
}

enum BloodType {
    A @enum(value: 0)
    B @enum(value: 1)
    O @enum(value: 2)
    AB @enum(value: 3)
}

type LukeyItem {
    name: String!
    description: String!
}
